/**
 * @file main.cpp
 * @author Antonin Thioux (antonin.thioux@gmail.com)
 * @brief Main file for rendering spatio-temporal hulls. Does minor parameter parsing.
 * @date last modified at 2022-06-02
 * @version 1.0
 */

#include <iostream>
#include <cstring>
#include <sstream>

#include "Render.h"

using namespace glm;
using namespace HullRendering;
using namespace std;

/**
 * @brief This function prints the help menu for flags and what not.
 */
void printHelp(){
    cout << "Usage: render <HULL-FILE.obj> [OPTIONS]" << endl;

    cout << "HULL-FILE.obj is:" << endl;
    cout << "\tThe path to the output hull object file generated by Spatio-Temporal Hull computation program" << endl;
    cout << "\tThe file should be standard .obj format (but with matching v & vn commands)." << endl;

    cout << "OPTIONS are:" << endl;
    cout << "\t-h,  --help \t\tDisplays this menu" << endl;
    cout << "\t-a,  --animation \tThe following directory contains the animation .obj files to display alongside the hulls." << endl;
    cout << "\t-f,  --frames \tThe integer following this option gives the number of frames for the animation." << endl;
}

/**
 * @brief This function displays a parameter usage error.
 * @param error The error message to display.
 */
void printError(const char *error){
    cerr << "[Usage Error]: \t" << error << endl;
    cout << "render -h \t for help" << endl;
    exit(EXIT_FAILURE);
}

/**
 * @brief Main function for the rendering of spatio-temporal hulls in .obj files.
 */
int main(int argc, char *argv[]){
    if (argc == 1)  // No file guard
        printError("No file given!");

    // Help menu guard
    if (argc == 2 && (!strcmp(argv[1], "-h") || !strcmp(argv[1], "--help"))){
        printHelp();
        exit(EXIT_SUCCESS);
    }

	// Parse parameters
	string filepath(argv[1]);
	string animationDir("");
	int duration = 0;
	if (argc > 2) {	 
		for (int i = 2; i < argc; i++) {
			string flag(argv[i]);
        	if (flag == "-h" || flag == "--help") printHelp();
			else if (flag == "-a" || flag == "--animation") animationDir = string(argv[++i]);
			else if (flag == "-f" || flag == "--frames") sscanf(argv[++i], "%d", &duration);
			else printError("Unknown flag!");
		}
	}

	// Check parameters
	if (animationDir == "" && duration > 0) printError("Animation directory missing!");
	if (animationDir != "" && duration < 1) printError("Number of frames wasn't given!");

	if(!glfwInit()){
        cerr << "intialization GLFW failed" << endl;
		return -1;
	}

    Render render(filepath, animationDir, duration);
    render.start();  
	return 0;
}
