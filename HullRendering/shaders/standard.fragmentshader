#version 330 core

in vec3 vertColor;
in vec3 position_worldspace;
in vec3 normal_cameraspace;
in vec3 eyeDirection_cameraspace;
in vec3 lightDirection_cameraspace;

out vec3 color;

void main() {
	vec3 lightColor = vec3(1,1,1);
	float lightPower = 0.175f;
	
	// Material properties
	vec3 materialDiffuseColor = vertColor;
	vec3 materialAmbientColor = vec3(0.75,0.75,0.75) * materialDiffuseColor;
	vec3 materialSpecularColor = vec3(1.0,1.0,1.0);

	// Distance to the light
	float distance = length(vec3(0.75,0.75,1.75) - position_worldspace);

	// Normal of the computed fragment, in camera space
	vec3 n = normalize(normal_cameraspace);
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize(lightDirection_cameraspace);
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp(dot(n,l),0,1);
	
	// Eye vector (towards the camera)
	vec3 E = normalize(eyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp(dot(E,R),0,1);
	
	vec3 fragmentColor = materialAmbientColor + 
			materialDiffuseColor * lightColor * lightPower * cosTheta / (distance*distance) +
			materialSpecularColor * lightColor * lightPower * pow(cosAlpha,5) / (distance*distance);
	color = fragmentColor;
}